// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String 
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model User {
  id            String  @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role @default(USER)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  orders        Order[]
  reviews       Review[]
  cart          CartItem[]
  favorites     FavoriteItem[]
}

model CartItem {
  id            String  @id @default(uuid())
  userId        String
  productId     String
  quantity      Int

  user          User    @relation(fields: [userId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, productId])
}

model FavoriteItem {
  id            String  @id @default(uuid())
  userId        String
  productId     String

  user          User    @relation(fields: [userId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, productId])
}


model Order {
  id            String  @id @default(uuid())
  userId String
  amount Float
  isPaid Boolean @default(false)
  deliveryStatus OrderStatus @default(PENDING)

  user User @relation(fields: [userId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  items OrderItem[]
}

model OrderItem {
  id            String  @id @default(uuid())
  orderId String
  productId String
  price Float
  quantity Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id            String  @id @default(uuid())
  userId String
  productId String
  rating Int
  comment String

  user User @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id            String  @id @default(uuid())
  categoryId String
  name String
  description String
  price Float
  discountPercent Int @default(0)
  images String[]
  properties Json

  category Category @relation(fields: [categoryId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews Review[]
  orderItems OrderItem[]
  cart CartItem[]
  favorite FavoriteItem[]
}

model Category {
  id            String  @id @default(uuid())
  name String
  description String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  products Product[]
  properties Property[]
}

model Property {
  id            String  @id @default(uuid())
  categoryId String
  name String
  values String[]

  category Category @relation(fields: [categoryId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Setting {
  id            String  @id @default(uuid())
  name String @unique
  values String[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELED
}